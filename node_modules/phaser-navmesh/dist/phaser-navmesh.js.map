{"version":3,"sources":["webpack://PhaserNavMeshPlugin/webpack/universalModuleDefinition","webpack://PhaserNavMeshPlugin/webpack/bootstrap","webpack://PhaserNavMeshPlugin/C:/Users/micha/Documents/GitHub/navmesh/node_modules/javascript-astar/astar.js","webpack://PhaserNavMeshPlugin/external {\"root\":\"Phaser\",\"commonjs\":\"phaser\",\"commonjs2\":\"phaser\",\"amd\":\"phaser\"}","webpack://PhaserNavMeshPlugin/../../navmesh/src/math/vector-2.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/navpoly.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/navgraph.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/utils.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/channel.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/math/line.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/math/polygon.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/navmesh.js","webpack://PhaserNavMeshPlugin/../../navmesh/src/index.js","webpack://PhaserNavMeshPlugin/./phaser-navmesh.js","webpack://PhaserNavMeshPlugin/./phaser-navmesh-plugin.js","webpack://PhaserNavMeshPlugin/./index.js"],"names":["Vector2","x","y","v","Math","atan2","dx","dy","sqrt","id","polygon","edges","neighbors","portals","centroid","calculateCentroid","boundingRadius","calculateRadius","weight","points","point","contains","isPointOnEdge","length","forEach","add","p","d","distance","edge","pointOnSegment","navPolygon","centroidDistance","NavGraph","navPolygons","nodes","init","navPolygon1","navPolygon2","cleanDirty","prototype","jsastar","Graph","markDirty","triarea2","a","b","c","ax","ay","bx","by","clamp","value","min","max","almostEqual","value1","value2","errorMargin","abs","angleDifference","i","PI","j","floor","areCollinear","line1","line2","area1","start","end","area2","p1","p2","push","left","right","pts","portalApex","portalLeft","portalRight","apexIndex","leftIndex","rightIndex","equals","path","x1","y1","x2","y2","top","bottom","pointOnLine","closed","first","last","inside","ix","iy","jx","jy","meshPolygonPoints","meshShrinkAmount","_meshShrinkAmount","newPolys","map","vectors","polyPoints","_navPolygons","_calculateNeighbors","_graph","destroy","poly","startPoint","endPoint","startPoly","endPoly","startDistance","Number","MAX_VALUE","endDistance","r","startVector","endVector","navPoly","_projectPointToPolygon","astarPath","astar","search","heuristic","navHeuristic","unshift","channel","nextNavPolygon","portal","stringPull","lastPoint","phaserPath","newPoint","clone","otherNavPoly","otherEdge","overlap","_getSegmentOverlap","edgeStartAngle","angle","a1","a2","d1","d2","line","sort","noOverlap","singlePointOverlap","closestProjection","closestDistance","projectedPoint","_projectPointToEdge","l2","_distanceSquared","t","plugin","key","scene","debugGraphics","navMesh","PointClass","Phaser","Geom","Point","findPath","graphics","visible","clear","drawCentroid","drawBounds","drawNeighbors","drawPortals","palette","navPolys","getPolygons","color","fillStyle","fillPoints","getPoints","fillCircle","lineStyle","strokeCircle","lineBetween","n","thickness","alpha","strokePoints","removeMesh","undefined","pluginManager","phaserNavMeshes","systems","sys","settings","isBooted","events","once","boot","emitter","off","meshes","Object","values","m","objectLayer","console","warn","objects","polygons","obj","height","width","mesh","Plugins","ScenePlugin"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AAAA;AAAA;AAAA;AACA,GAAG,sBAIH;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,OAAO;AACnB,YAAY,KAAK;AACjB;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;;AAE5B;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,4CAA4C,QAAQ;AACpD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;;AAEA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;A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","file":"phaser-navmesh.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"phaser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"phaser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserNavMeshPlugin\"] = factory(require(\"phaser\"));\n\telse\n\t\troot[\"PhaserNavMeshPlugin\"] = factory(root[\"Phaser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","// javascript-astar 0.4.2\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n(function(definition) {\n  /* global module, define */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], definition);\n  } else {\n    var exports = definition();\n    window.astar = exports.astar;\n    window.Graph = exports.Graph;\n  }\n})(function() {\n\nfunction pathTo(node) {\n  var curr = node;\n  var path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function(node) {\n    return node.f;\n  });\n}\n\nvar astar = {\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\n    var closest = options.closest || false;\n\n    var openHeap = getHeap();\n    var closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n};\n\n/**\n * A graph memory structure\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options]\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n */\nfunction Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function() {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function() {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function(node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function(node) {\n  var ret = [];\n  var x = node.x;\n  var y = node.y;\n  var grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function() {\n  var graphString = [];\n  var nodes = this.grid;\n  for (var x = 0; x < nodes.length; x++) {\n    var rowDebug = [];\n    var row = nodes[x];\n    for (var y = 0; y < row.length; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function() {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function(fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function() {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function() {\n    return this.content.length;\n  },\n  rescoreElement: function(node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n};\n\nreturn {\n  astar: astar,\n  Graph: Graph\n};\n\n});","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","/**\r\n * Stripped down version of Phaser's Vector2 with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport default class Vector2 {\r\n  constructor(x, y) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n  }\r\n\r\n  equals(v) {\r\n    return this.x === v.x && this.y === v.y;\r\n  }\r\n\r\n  angle(v) {\r\n    return Math.atan2(v.y - this.y, v.x - this.x);\r\n  }\r\n\r\n  distance(v) {\r\n    const dx = v.x - this.x;\r\n    const dy = v.y - this.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  add(v) {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n  }\r\n\r\n  subtract(v) {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n  }\r\n\r\n  clone() {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n\r\n/**\r\n * A class that represents a navigable polygon with a navmesh. It is built on top of a\r\n * {@link Polygon}. It implements the properties and fields that javascript-astar needs - weight,\r\n * toString, isWall and getCost. See GPS test from astar repo for structure:\r\n * https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavPoly\r\n */\r\nexport default class NavPoly {\r\n  /**\r\n   * Creates an instance of NavPoly.\r\n   * @param {number} id\r\n   * @param {Polygon} polygon\r\n   *\r\n   * @memberof NavPoly\r\n   */\r\n  constructor(id, polygon) {\r\n    this.id = id;\r\n    this.polygon = polygon;\r\n    this.edges = polygon.edges;\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n    this.centroid = this.calculateCentroid();\r\n    this.boundingRadius = this.calculateRadius();\r\n\r\n    this.weight = 1; // jsastar property\r\n  }\r\n\r\n  /**\r\n   * Returns an array of points that form the polygon.\r\n   *\r\n   * @returns {Vector2[]}\r\n   * @memberof NavPoly\r\n   */\r\n  getPoints() {\r\n    return this.polygon.points;\r\n  }\r\n\r\n  /**\r\n   * Check if the given point-like object is within the polygon\r\n   *\r\n   * @param {object} point Object of the form {x, y}\r\n   * @returns {boolean}\r\n   * @memberof NavPoly\r\n   */\r\n  contains(point) {\r\n    // Phaser's polygon check doesn't handle when a point is on one of the edges of the line. Note:\r\n    // check numerical stability here. It would also be good to optimize this for different shapes.\r\n    return this.polygon.contains(point.x, point.y) || this.isPointOnEdge(point);\r\n  }\r\n\r\n  /**\r\n   * Only rectangles are supported, so this calculation works, but this is not actually the centroid\r\n   * calculation for a polygon. This is just the average of the vertices - proper centroid of a\r\n   * polygon factors in the area.\r\n   *\r\n   * @returns {Vector2}\r\n   * @memberof NavPoly\r\n   */\r\n  calculateCentroid() {\r\n    const centroid = new Vector2(0, 0);\r\n    const length = this.polygon.points.length;\r\n    this.polygon.points.forEach(p => centroid.add(p));\r\n    centroid.x /= length;\r\n    centroid.y /= length;\r\n    return centroid;\r\n  }\r\n\r\n  /**\r\n   * Calculate the radius of a circle that circumscribes the polygon.\r\n   *\r\n   * @returns {number}\r\n   * @memberof NavPoly\r\n   */\r\n  calculateRadius() {\r\n    let boundingRadius = 0;\r\n    for (const point of this.polygon.points) {\r\n      const d = this.centroid.distance(point);\r\n      if (d > boundingRadius) boundingRadius = d;\r\n    }\r\n    return boundingRadius;\r\n  }\r\n\r\n  /**\r\n   * Check if the given point-like object is on one of the edges of the polygon.\r\n   *\r\n   * @param {object} Point-like object in the form { x, y }\r\n   * @returns {boolean}\r\n   * @memberof NavPoly\r\n   */\r\n  isPointOnEdge({ x, y }) {\r\n    for (const edge of this.edges) {\r\n      if (edge.pointOnSegment(x, y)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  destroy() {\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n  }\r\n\r\n  // jsastar methods\r\n  toString() {\r\n    return `NavPoly(id: ${this.id} at: ${this.centroid})`;\r\n  }\r\n  isWall() {\r\n    return this.weight === 0;\r\n  }\r\n  centroidDistance(navPolygon) {\r\n    return this.centroid.distance(navPolygon.centroid);\r\n  }\r\n  getCost(navPolygon) {\r\n    return this.centroidDistance(navPolygon);\r\n  }\r\n}\r\n","import jsastar from \"javascript-astar\";\r\n\r\n/**\r\n * Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\r\n * repo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavGraph\r\n * @private\r\n */\r\nclass NavGraph {\r\n  constructor(navPolygons) {\r\n    this.nodes = navPolygons;\r\n    this.init();\r\n  }\r\n\r\n  neighbors(navPolygon) {\r\n    return navPolygon.neighbors;\r\n  }\r\n\r\n  navHeuristic(navPolygon1, navPolygon2) {\r\n    return navPolygon1.centroidDistance(navPolygon2);\r\n  }\r\n\r\n  destroy() {\r\n    this.cleanDirty();\r\n    this.nodes = [];\r\n  }\r\n}\r\n\r\nNavGraph.prototype.init = jsastar.Graph.prototype.init;\r\nNavGraph.prototype.cleanDirty = jsastar.Graph.prototype.cleanDirty;\r\nNavGraph.prototype.markDirty = jsastar.Graph.prototype.markDirty;\r\n\r\nexport default NavGraph;\r\n","/**\r\n * Twice the area of the triangle formed by a, b and c\r\n * @returns {number}\r\n * @private\r\n */\r\nexport function triarea2(a, b, c) {\r\n  const ax = b.x - a.x;\r\n  const ay = b.y - a.y;\r\n  const bx = c.x - a.x;\r\n  const by = c.y - a.y;\r\n  return bx * ay - ax * by;\r\n}\r\n\r\n/**\r\n * Clamp value between min and max\r\n * @returns {number}\r\n * @private\r\n */\r\nexport function clamp(value, min, max) {\r\n  if (value < min) value = min;\r\n  if (value > max) value = max;\r\n  return value;\r\n}\r\n\r\n/**\r\n * Check if two values within a small margin of one another\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function almostEqual(value1, value2, errorMargin = 0.0001) {\r\n  if (Math.abs(value1 - value2) <= errorMargin) return true;\r\n  else return false;\r\n}\r\n\r\n/**\r\n * Find the smallest angle difference between two angles\r\n * https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0\r\n * @returns {number}\r\n * @private\r\n */\r\nexport function angleDifference(x, y) {\r\n  let a = x - y;\r\n  const i = a + Math.PI;\r\n  const j = Math.PI * 2;\r\n  a = i - Math.floor(i / j) * j; // (a+180) % 360; this ensures the correct sign\r\n  a -= Math.PI;\r\n  return a;\r\n}\r\n\r\n/**\r\n * Check if two lines are collinear (within a marign)\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function areCollinear(line1, line2, errorMargin = 0.0001) {\r\n  // Figure out if the two lines are equal by looking at the area of the triangle formed\r\n  // by their points\r\n  const area1 = triarea2(line1.start, line1.end, line2.start);\r\n  const area2 = triarea2(line1.start, line1.end, line2.end);\r\n  if (almostEqual(area1, 0, errorMargin) && almostEqual(area2, 0, errorMargin)) {\r\n    return true;\r\n  } else return false;\r\n}\r\n","// Mostly sourced from PatrolJS at the moment. TODO: come back and reimplement this as an incomplete\r\n// funnel algorithm so astar checks can be more accurate.\r\n\r\nimport { triarea2 } from \"./utils\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass Channel {\r\n  constructor() {\r\n    this.portals = [];\r\n  }\r\n\r\n  push(p1, p2 = null) {\r\n    if (p2 === null) p2 = p1;\r\n    this.portals.push({\r\n      left: p1,\r\n      right: p2\r\n    });\r\n  }\r\n\r\n  stringPull() {\r\n    var portals = this.portals;\r\n    var pts = [];\r\n    // Init scan state\r\n    var portalApex, portalLeft, portalRight;\r\n    var apexIndex = 0,\r\n      leftIndex = 0,\r\n      rightIndex = 0;\r\n\r\n    portalApex = portals[0].left;\r\n    portalLeft = portals[0].left;\r\n    portalRight = portals[0].right;\r\n\r\n    // Add start point.\r\n    pts.push(portalApex);\r\n\r\n    for (var i = 1; i < portals.length; i++) {\r\n      // Find the next portal vertices\r\n      var left = portals[i].left;\r\n      var right = portals[i].right;\r\n\r\n      // Update right vertex.\r\n      if (triarea2(portalApex, portalRight, right) <= 0.0) {\r\n        if (portalApex.equals(portalRight) || triarea2(portalApex, portalLeft, right) > 0.0) {\r\n          // Tighten the funnel.\r\n          portalRight = right;\r\n          rightIndex = i;\r\n        } else {\r\n          // Right vertex just crossed over the left vertex, so the left vertex should\r\n          // now be part of the path.\r\n          pts.push(portalLeft);\r\n\r\n          // Restart scan from portal left point.\r\n\r\n          // Make current left the new apex.\r\n          portalApex = portalLeft;\r\n          apexIndex = leftIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Update left vertex.\r\n      if (triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n        if (portalApex.equals(portalLeft) || triarea2(portalApex, portalRight, left) < 0.0) {\r\n          // Tighten the funnel.\r\n          portalLeft = left;\r\n          leftIndex = i;\r\n        } else {\r\n          // Left vertex just crossed over the right vertex, so the right vertex should\r\n          // now be part of the path\r\n          pts.push(portalRight);\r\n\r\n          // Restart scan from portal right point.\r\n\r\n          // Make current right the new apex.\r\n          portalApex = portalRight;\r\n          apexIndex = rightIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pts.length === 0 || !pts[pts.length - 1].equals(portals[portals.length - 1].left)) {\r\n      // Append last point to path.\r\n      pts.push(portals[portals.length - 1].left);\r\n    }\r\n\r\n    this.path = pts;\r\n    return pts;\r\n  }\r\n}\r\n\r\nexport default Channel;\r\n","import Vector2 from \"./vector-2\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Line with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Line\r\n */\r\nexport default class Line {\r\n  constructor(x1, y1, x2, y2) {\r\n    this.start = new Vector2(x1, y1);\r\n    this.end = new Vector2(x2, y2);\r\n\r\n    this.left = Math.min(x1, x2);\r\n    this.right = Math.max(x1, x2);\r\n    this.top = Math.min(y1, y2);\r\n    this.bottom = Math.max(y1, y2);\r\n  }\r\n\r\n  pointOnSegment(x, y) {\r\n    return (\r\n      x >= this.left &&\r\n      x <= this.right &&\r\n      y >= this.top &&\r\n      y <= this.bottom &&\r\n      this.pointOnLine(x, y)\r\n    );\r\n  }\r\n\r\n  pointOnLine(x, y) {\r\n    // Compare slope of line start -> xy to line start -> line end\r\n    return (x - this.left) * (this.bottom - this.top) === (this.right - this.left) * (y - this.top);\r\n  }\r\n}\r\n","import Line from \"./line\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Polygon with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Polygon\r\n */\r\nexport default class Polygon {\r\n  constructor(points, closed = true) {\r\n    this.points = points;\r\n    this.edges = [];\r\n\r\n    for (let i = 1; i < points.length; i++) {\r\n      const p1 = points[i - 1];\r\n      const p2 = points[i];\r\n      this.edges.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n    }\r\n    if (closed) {\r\n      const first = points[0];\r\n      const last = points[points.length - 1];\r\n      this.edges.push(new Line(first.x, first.y, last.x, last.y));\r\n    }\r\n  }\r\n\r\n  contains(x, y) {\r\n    let inside = false;\r\n\r\n    for (let i = -1, j = this.points.length - 1; ++i < this.points.length; j = i) {\r\n      const ix = this.points[i].x;\r\n      const iy = this.points[i].y;\r\n\r\n      const jx = this.points[j].x;\r\n      const jy = this.points[j].y;\r\n\r\n      if (\r\n        ((iy <= y && y < jy) || (jy <= y && y < iy)) &&\r\n        x < ((jx - ix) * (y - iy)) / (jy - iy) + ix\r\n      ) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n\r\n    return inside;\r\n  }\r\n}\r\n","import jsastar from \"javascript-astar\";\r\nimport NavPoly from \"./navpoly\";\r\nimport NavGraph from \"./navgraph\";\r\nimport Channel from \"./channel\";\r\nimport { angleDifference, areCollinear, clamp } from \"./utils\";\r\nimport Vector2 from \"./math/vector-2\";\r\nimport Line from \"./math/line\";\r\nimport Polygon from \"./math/polygon\";\r\n\r\n/**\r\n * The workhorse that represents a navigation mesh built from a series of polygons. Once built, the\r\n * mesh can be asked for a path from one point to another point. Some internal terminology usage:\r\n * - neighbor: a polygon that shares part of an edge with another polygon\r\n * - portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\r\n * - channel: the path of polygons from starting point to end point\r\n * - pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\r\n *   channel. Equivalent to having a string snaking through a hallway and then pulling it taut.\r\n *\r\n * @class NavMesh\r\n */\r\nexport default class NavMesh {\r\n  /**\r\n   * Creates an instance of NavMesh.\r\n   * @param {object[][]} meshPolygonPoints Array where each element is an array of point-like\r\n   * objects that defines a polygon.\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been\r\n   * shrunk around obstacles (a.k.a the amount obstacles have been expanded)\r\n   * @memberof NavMesh\r\n   */\r\n  constructor(meshPolygonPoints, meshShrinkAmount = 0) {\r\n    this._meshShrinkAmount = meshShrinkAmount;\r\n\r\n    const newPolys = meshPolygonPoints.map(polyPoints => {\r\n      const vectors = polyPoints.map(p => new Vector2(p.x, p.y));\r\n      return new Polygon(vectors);\r\n    });\r\n\r\n    this._navPolygons = newPolys.map((polygon, i) => new NavPoly(i, polygon));\r\n\r\n    this._calculateNeighbors();\r\n\r\n    // Astar graph of connections between polygons\r\n    this._graph = new NavGraph(this._navPolygons);\r\n  }\r\n\r\n  /**\r\n   * Get the NavPolys that are in this navmesh.\r\n   *\r\n   * @returns {NavPoly[]}\r\n   * @memberof NavMesh\r\n   */\r\n  getPolygons() {\r\n    return this._navPolygons;\r\n  }\r\n\r\n  /**\r\n   * Cleanup method to remove references.\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  destroy() {\r\n    this._graph.destroy();\r\n    for (const poly of this._navPolygons) poly.destroy();\r\n    this._navPolygons = [];\r\n  }\r\n\r\n  /**\r\n   * Find a path from the start point to the end point using this nav mesh.\r\n   *\r\n   * @param {object} startPoint A point-like object in the form {x, y}\r\n   * @param {object} endPoint A point-like object in the form {x, y}\r\n   * @returns {Vector2[]|null} An array of points if a path is found, or null if no path\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  findPath(startPoint, endPoint) {\r\n    let startPoly = null;\r\n    let endPoly = null;\r\n    let startDistance = Number.MAX_VALUE;\r\n    let endDistance = Number.MAX_VALUE;\r\n    let d, r;\r\n    const startVector = new Vector2(startPoint.x, startPoint.y);\r\n    const endVector = new Vector2(endPoint.x, endPoint.y);\r\n\r\n    // Find the closest poly for the starting and ending point\r\n    for (const navPoly of this._navPolygons) {\r\n      r = navPoly.boundingRadius;\r\n      // Start\r\n      d = navPoly.centroid.distance(startVector);\r\n      if (d <= startDistance && d <= r && navPoly.contains(startVector)) {\r\n        startPoly = navPoly;\r\n        startDistance = d;\r\n      }\r\n      // End\r\n      d = navPoly.centroid.distance(endVector);\r\n      if (d <= endDistance && d <= r && navPoly.contains(endVector)) {\r\n        endPoly = navPoly;\r\n        endDistance = d;\r\n      }\r\n    }\r\n\r\n    // If the start point wasn't inside a polygon, run a more liberal check that allows a point\r\n    // to be within meshShrinkAmount radius of a polygon\r\n    if (!startPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        // Check if point is within bounding circle to avoid extra projection calculations\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(startVector);\r\n        if (d <= r) {\r\n          // Check if projected point is within range of a polgyon and is closer than the\r\n          // previous point\r\n          const { distance } = this._projectPointToPolygon(startVector, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < startDistance) {\r\n            startPoly = navPoly;\r\n            startDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Same check as above, but for the end point\r\n    if (!endPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(endVector);\r\n        if (d <= r) {\r\n          const { distance } = this._projectPointToPolygon(endVector, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < endDistance) {\r\n            endPoly = navPoly;\r\n            endDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // No matching polygons locations for the start or end, so no path found\r\n    if (!startPoly || !endPoly) return null;\r\n\r\n    // If the start and end polygons are the same, return a direct path\r\n    if (startPoly === endPoly) return [startVector, endVector];\r\n\r\n    // Search!\r\n    const astarPath = jsastar.astar.search(this._graph, startPoly, endPoly, {\r\n      heuristic: this._graph.navHeuristic\r\n    });\r\n\r\n    // While the start and end polygons may be valid, no path between them\r\n    if (astarPath.length === 0) return null;\r\n\r\n    // jsastar drops the first point from the path, but the funnel algorithm needs it\r\n    astarPath.unshift(startPoly);\r\n\r\n    // We have a path, so now time for the funnel algorithm\r\n    const channel = new Channel();\r\n    channel.push(startVector);\r\n    for (let i = 0; i < astarPath.length - 1; i++) {\r\n      const navPolygon = astarPath[i];\r\n      const nextNavPolygon = astarPath[i + 1];\r\n\r\n      // Find the portal\r\n      let portal = null;\r\n      for (let i = 0; i < navPolygon.neighbors.length; i++) {\r\n        if (navPolygon.neighbors[i].id === nextNavPolygon.id) {\r\n          portal = navPolygon.portals[i];\r\n        }\r\n      }\r\n\r\n      // Push the portal vertices into the channel\r\n      channel.push(portal.start, portal.end);\r\n    }\r\n    channel.push(endVector);\r\n\r\n    // Pull a string along the channel to run the funnel\r\n    channel.stringPull();\r\n\r\n    // Clone path, excluding duplicates\r\n    let lastPoint = null;\r\n    const phaserPath = [];\r\n    for (const p of channel.path) {\r\n      const newPoint = p.clone();\r\n      if (!lastPoint || !newPoint.equals(lastPoint)) phaserPath.push(newPoint);\r\n      lastPoint = newPoint;\r\n    }\r\n\r\n    return phaserPath;\r\n  }\r\n\r\n  _calculateNeighbors() {\r\n    // Fill out the neighbor information for each navpoly\r\n    for (let i = 0; i < this._navPolygons.length; i++) {\r\n      const navPoly = this._navPolygons[i];\r\n\r\n      for (let j = i + 1; j < this._navPolygons.length; j++) {\r\n        const otherNavPoly = this._navPolygons[j];\r\n\r\n        // Check if the other navpoly is within range to touch\r\n        const d = navPoly.centroid.distance(otherNavPoly.centroid);\r\n        if (d > navPoly.boundingRadius + otherNavPoly.boundingRadius) continue;\r\n\r\n        // The are in range, so check each edge pairing\r\n        for (const edge of navPoly.edges) {\r\n          for (const otherEdge of otherNavPoly.edges) {\r\n            // If edges aren't collinear, not an option for connecting navpolys\r\n            if (!areCollinear(edge, otherEdge)) continue;\r\n\r\n            // If they are collinear, check if they overlap\r\n            const overlap = this._getSegmentOverlap(edge, otherEdge);\r\n            if (!overlap) continue;\r\n\r\n            // Connections are symmetric!\r\n            navPoly.neighbors.push(otherNavPoly);\r\n            otherNavPoly.neighbors.push(navPoly);\r\n\r\n            // Calculate the portal between the two polygons - this needs to be in\r\n            // counter-clockwise order, relative to each polygon\r\n            const [p1, p2] = overlap;\r\n            let edgeStartAngle = navPoly.centroid.angle(edge.start);\r\n            let a1 = navPoly.centroid.angle(overlap[0]);\r\n            let a2 = navPoly.centroid.angle(overlap[1]);\r\n            let d1 = angleDifference(edgeStartAngle, a1);\r\n            let d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              navPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              navPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            edgeStartAngle = otherNavPoly.centroid.angle(otherEdge.start);\r\n            a1 = otherNavPoly.centroid.angle(overlap[0]);\r\n            a2 = otherNavPoly.centroid.angle(overlap[1]);\r\n            d1 = angleDifference(edgeStartAngle, a1);\r\n            d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              otherNavPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              otherNavPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            // Two convex polygons shouldn't be connected more than once! (Unless\r\n            // there are unnecessary vertices...)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check two collinear line segments to see if they overlap by sorting the points.\r\n  // Algorithm source: http://stackoverflow.com/a/17152247\r\n  _getSegmentOverlap(line1, line2) {\r\n    const points = [\r\n      { line: line1, point: line1.start },\r\n      { line: line1, point: line1.end },\r\n      { line: line2, point: line2.start },\r\n      { line: line2, point: line2.end }\r\n    ];\r\n    points.sort(function(a, b) {\r\n      if (a.point.x < b.point.x) return -1;\r\n      else if (a.point.x > b.point.x) return 1;\r\n      else {\r\n        if (a.point.y < b.point.y) return -1;\r\n        else if (a.point.y > b.point.y) return 1;\r\n        else return 0;\r\n      }\r\n    });\r\n    // If the first two points in the array come from the same line, no overlap\r\n    const noOverlap = points[0].line === points[1].line;\r\n    // If the two middle points in the array are the same coordinates, then there is a\r\n    // single point of overlap.\r\n    const singlePointOverlap = points[1].point.equals(points[2].point);\r\n    if (noOverlap || singlePointOverlap) return null;\r\n    else return [points[1].point, points[2].point];\r\n  }\r\n\r\n  /**\r\n   * Project a point onto a polygon in the shortest distance possible.\r\n   *\r\n   * @param {Phaser.Point} point The point to project\r\n   * @param {NavPoly} navPoly The navigation polygon to test against\r\n   * @returns {{point: Phaser.Point, distance: number}}\r\n   *\r\n   * @private\r\n   * @memberof NavMesh\r\n   */\r\n  _projectPointToPolygon(point, navPoly) {\r\n    let closestProjection = null;\r\n    let closestDistance = Number.MAX_VALUE;\r\n    for (const edge of navPoly.edges) {\r\n      const projectedPoint = this._projectPointToEdge(point, edge);\r\n      const d = point.distance(projectedPoint);\r\n      if (closestProjection === null || d < closestDistance) {\r\n        closestDistance = d;\r\n        closestProjection = projectedPoint;\r\n      }\r\n    }\r\n    return { point: closestProjection, distance: closestDistance };\r\n  }\r\n\r\n  _distanceSquared(a, b) {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n\r\n  // Project a point onto a line segment\r\n  // JS Source: http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\n  _projectPointToEdge(point, line) {\r\n    const a = line.start;\r\n    const b = line.end;\r\n    // Consider the parametric equation for the edge's line, p = a + t (b - a). We want to find\r\n    // where our point lies on the line by solving for t:\r\n    //  t = [(p-a) . (b-a)] / |b-a|^2\r\n    const l2 = this._distanceSquared(a, b);\r\n    let t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / l2;\r\n    // We clamp t from [0,1] to handle points outside the segment vw.\r\n    t = clamp(t, 0, 1);\r\n    // Project onto the segment\r\n    const p = new Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y));\r\n    return p;\r\n  }\r\n}\r\n","import NavMesh from \"./navmesh\";\r\n\r\nexport default NavMesh;\r\n","import NavMesh from \"navmesh/src\"; // import the source - not the dist - no need to double build\r\nimport Phaser from \"phaser\";\r\n\r\n/**\r\n * A wrapper around {@link NavMesh} for Phaser 3. Create instances of this class from\r\n * {@link PhaserNavMeshPlugin}. This is the workhorse that represents a navigation mesh built from a\r\n * series of polygons. Once built, the mesh can be asked for a path from one point to another point.\r\n *\r\n * Compared to {@link NavMesh}, this adds visual debugging capabilities and converts paths to\r\n * Phaser-compatible point instances.\r\n *\r\n * @export\r\n * @class PhaserNavMesh\r\n */\r\nexport default class PhaserNavMesh {\r\n  /**\r\n   * Creates an instance of PhaserNavMesh.\r\n   * @param {PhaserNavMeshPlugin} plugin The plugin that owns this mesh.\r\n   * @param {string} key The key the mesh is stored under within the plugin.\r\n   * @param {object[][]} meshPolygonPoints Array where each element is an array of point-like\r\n   * objects that defines a polygon.\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been shrunk\r\n   * around obstacles (a.k.a the amount obstacles have been expanded)\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  constructor(plugin, key, meshPolygonPoints, meshShrinkAmount = 0) {\r\n    this.key = key;\r\n    this.plugin = plugin;\r\n    this.scene = plugin.scene;\r\n    this.debugGraphics = null;\r\n    this.navMesh = new NavMesh(meshPolygonPoints, meshShrinkAmount);\r\n  }\r\n\r\n  /**\r\n   * See {@link NavMesh#findPath}. This implements the same functionality, except that the returned path\r\n   * is converted to Phaser-compatible points.\r\n   *\r\n   * @param {object} startPoint A point-like object in the form {x, y}\r\n   * @param {object} endPoint A point-like object in the form {x, y}\r\n   * @param {class} [PointClass=Phaser.Geom.Point]\r\n   * @returns {object[]|null} An array of points if a path is found, or null if no path\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  findPath(startPoint, endPoint, PointClass = Phaser.Geom.Point) {\r\n    const path = this.navMesh.findPath(startPoint, endPoint);\r\n    return path ? path.map(({ x, y }) => new PointClass(x, y)) : path;\r\n  }\r\n\r\n  /**\r\n   * Enable the debug drawing graphics. If no graphics object is providied, a new instance will be\r\n   * created.\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} [graphics] An optional graphics object for the mesh to use\r\n   * for debug drawing. Note, the mesh will destroy this graphics object when the mesh is destroyed.\r\n   * @returns {Phaser.GameObjects.Graphics} The graphics object this mesh uses.\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  enableDebug(graphics) {\r\n    if (!graphics && !this.debugGraphics) {\r\n      this.debugGraphics = this.scene.add.graphics();\r\n    } else if (graphics) {\r\n      if (this.debugGraphics) this.debugGraphics.destroy();\r\n      this.debugGraphics = graphics;\r\n    }\r\n\r\n    this.debugGraphics.visible = true;\r\n\r\n    return this.debugGraphics;\r\n  }\r\n\r\n  /**\r\n   * Hide the debug graphics, but don't destroy it.\r\n   *\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  disableDebug() {\r\n    if (this.debugGraphics) this.debugGraphics.visible = false;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the debug graphics object is enabled and visible.\r\n   *\r\n   * @returns {boolean}\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  isDebugEnabled() {\r\n    return this.debugGraphics && this.debugGraphics.visible;\r\n  }\r\n\r\n  /**\r\n   * Clear the debug graphics.\r\n   *\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  debugDrawClear() {\r\n    if (this.debugGraphics) this.debugGraphics.clear();\r\n  }\r\n\r\n  /**\r\n   * Visualize the polygons in the navmesh by drawing them to the debug graphics.\r\n   *\r\n   * @param {object} options\r\n   * @param {boolean} [options.drawCentroid=true] For each polygon, show the approx centroid\r\n   * @param {boolean} [options.drawBounds=false] For each polygon, show the bounding radius\r\n   * @param {boolean} [options.drawNeighbors=true] For each polygon, show the connections to\r\n   * neighbors\r\n   * @param {boolean} [options.drawPortals=true] For each polygon, show the portal edges\r\n   * @param {number[]} [options.palette=[0x00a0b0, 0x6a4a3c, 0xcc333f, 0xeb6841, 0xedc951]] An array\r\n   * of Phaser-compatible format colors to use when drawing the individual polygons. The first poly\r\n   * uses the first color, the second poly uses the second color, etc. \r\n   */\r\n  debugDrawMesh({\r\n    drawCentroid = true,\r\n    drawBounds = false,\r\n    drawNeighbors = true,\r\n    drawPortals = true,\r\n    palette = [0x00a0b0, 0x6a4a3c, 0xcc333f, 0xeb6841, 0xedc951]\r\n  } = {}) {\r\n    if (!this.debugGraphics) return;\r\n\r\n    const navPolys = this.navMesh.getPolygons();\r\n\r\n    navPolys.forEach(poly => {\r\n      const color = palette[poly.id % palette.length];\r\n      this.debugGraphics.fillStyle(color);\r\n      this.debugGraphics.fillPoints(poly.getPoints(), true);\r\n\r\n      if (drawCentroid) {\r\n        this.debugGraphics.fillStyle(0x000000);\r\n        this.debugGraphics.fillCircle(poly.centroid.x, poly.centroid.y, 4);\r\n      }\r\n\r\n      if (drawBounds) {\r\n        this.debugGraphics.lineStyle(1, 0xffffff);\r\n        this.debugGraphics.strokeCircle(poly.centroid.x, poly.centroid.y, poly.boundingRadius);\r\n      }\r\n\r\n      if (drawNeighbors) {\r\n        this.debugGraphics.lineStyle(2, 0x000000);\r\n        poly.neighbors.forEach(n => {\r\n          this.debugGraphics.lineBetween(\r\n            poly.centroid.x,\r\n            poly.centroid.y,\r\n            n.centroid.x,\r\n            n.centroid.y\r\n          );\r\n        });\r\n      }\r\n\r\n      if (drawPortals) {\r\n        this.debugGraphics.lineStyle(10, 0x000000);\r\n        poly.portals.forEach(portal =>\r\n          this.debugGraphics.lineBetween(portal.start.x, portal.start.y, portal.end.x, portal.end.y)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Visualize a path (array of points) on the debug graphics.\r\n   *\r\n   * @param {object[]} path Array of point-like objects in the form {x, y} \r\n   * @param {number} [color=0x00FF00]\r\n   * @param {number} [thickness=10]\r\n   * @param {number} [alpha=1]\r\n   */\r\n  debugDrawPath(path, color = 0x00ff00, thickness = 10, alpha = 1) {\r\n    if (!this.debugGraphics) return;\r\n\r\n    if (path && path.length) {\r\n      // Draw line for path\r\n      this.debugGraphics.lineStyle(thickness, color, alpha);\r\n      this.debugGraphics.strokePoints(path);\r\n\r\n      // Draw circle at start and end of path\r\n      this.debugGraphics.fillStyle(color, alpha);\r\n      const d = 1.2 * thickness;\r\n      this.debugGraphics.fillCircle(path[0].x, path[0].y, d, d);\r\n\r\n      if (path.length > 1) {\r\n        const lastPoint = path[path.length - 1];\r\n        this.debugGraphics.fillCircle(lastPoint.x, lastPoint.y, d, d);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy the mesh, kill the debug graphic and unregister itself with the plugin.\r\n   *\r\n   * @memberof PhaserNavMesh\r\n   */\r\n  destroy() {\r\n    if (this.navMesh) this.navMesh.destroy();\r\n    if (this.debugGraphics) this.debugGraphics.destroy();\r\n    this.plugin.removeMesh(this.key);\r\n    this.navMesh = undefined;\r\n    this.debugGraphics = undefined;\r\n    this.plugin = undefined;\r\n    this.scene = undefined;\r\n  }\r\n}\r\n","import Phaser from \"phaser\";\r\nimport PhaserNavMesh from \"./phaser-navmesh\";\r\n\r\n/**\r\n * This class can create navigation meshes for use in Phaser 3. The navmeshes can be constructed\r\n * from convex polygons embedded in a Tiled map. The class that conforms to Phaser 3's plugin\r\n * structure.\r\n *\r\n * @export\r\n * @class PhaserNavMeshPlugin\r\n */\r\nexport default class PhaserNavMeshPlugin extends Phaser.Plugins.ScenePlugin {\r\n  constructor(scene, pluginManager) {\r\n    super(scene, pluginManager);\r\n\r\n    this.phaserNavMeshes = {};\r\n    this.scene = scene;\r\n    this.systems = scene.sys;\r\n\r\n    if (!scene.sys.settings.isBooted) this.systems.events.once(\"boot\", this.boot, this);\r\n  }\r\n\r\n  /**\r\n   * Phaser.Scene lifecycle event\r\n   *\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  boot() {\r\n    const emitter = this.systems.events;\r\n    emitter.once(\"destroy\", this.destroy, this);\r\n  }\r\n\r\n  /**\r\n   * Phaser.Scene lifecycle event - noop in this plugin, but still required.\r\n   *\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  init() {}\r\n\r\n  /**\r\n   * Phaser.Scene lifecycle event - noop in this plugin, but still required.\r\n   *\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  start() {}\r\n\r\n  /**\r\n   * Phaser.Scene lifecycle event - will destroy all navmeshes created.\r\n   *\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  destroy() {\r\n    this.systems.events.off(\"boot\", this.boot, this);\r\n    const meshes = Object.values(this.phaserNavMeshes);\r\n    this.phaserNavMeshes = {};\r\n    meshes.forEach(m => m.destroy());\r\n    this.scene = undefined;\r\n    this.systems = undefined;\r\n  }\r\n\r\n  /**\r\n   * Remove the navmesh stored under the given key from the plugin. This does not destroy the\r\n   * navmesh.\r\n   *\r\n   * @param {string} key\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  removeMesh(key) {\r\n    if (this.phaserNavMeshes[key]) this.phaserNavMeshes[key] = undefined;\r\n  }\r\n\r\n  /**\r\n   * Load a navmesh from Tiled. Currently assumes that the polygons are squares! Does not support\r\n   * tilemap layer scaling, rotation or position.\r\n   *\r\n   * @param {string} key Key to use when storign this navmesh within the plugin.\r\n   * @param {Phaser.Tilemaps.ObjectLayer} objectLayer The ObjectLayer from a tilemap that contains\r\n   * the polygons that make up the navmesh.\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been shrunk\r\n   * around obstacles (a.k.a the amount obstacles have been expanded)\r\n   * @returns {PhaserNavMesh}\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  buildMeshFromTiled(key, objectLayer, meshShrinkAmount = 0) {\r\n    if (this.phaserNavMeshes[key]) {\r\n      console.warn(`NavMeshPlugin: a navmesh already exists with the given key: ${key}`);\r\n      return this.phaserNavMeshes[key];\r\n    }\r\n\r\n    if (!objectLayer || objectLayer.length === 0) {\r\n      console.warn(\r\n        `NavMeshPlugin: The given tilemap object layer is empty or undefined: ${objectLayer}`\r\n      );\r\n    }\r\n\r\n    // Load up the object layer\r\n    const objects = objectLayer ? objectLayer.objects : [];\r\n\r\n    // Loop over the objects and construct a polygon - assumes a rectangle for now!\r\n    // TODO: support layer position, scale, rotation\r\n    const polygons = objects.map(obj => {\r\n      const top = obj.y;\r\n      const bottom = obj.y + obj.height;\r\n      const left = obj.x;\r\n      const right = obj.x + obj.width;\r\n      return [\r\n        { x: left, y: top },\r\n        { x: left, y: bottom },\r\n        { x: right, y: bottom },\r\n        { x: right, y: top }\r\n      ];\r\n    });\r\n\r\n    const mesh = new PhaserNavMesh(this, key, polygons, meshShrinkAmount);\r\n\r\n    this.phaserNavMeshes[key] = mesh;\r\n\r\n    return mesh;\r\n  }\r\n}\r\n","import PhaserNavMeshPlugin from \"./phaser-navmesh-plugin\";\r\nimport PhaserNavMesh from \"./phaser-navmesh\";\r\n\r\nexport default PhaserNavMeshPlugin;\r\nexport { PhaserNavMesh };\r\n"],"sourceRoot":""}